{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50f64bc4-4062-43b1-80ff-be34af88c856",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-12-21 21:06:49,997 - INFO - Server is listening on 127.0.0.1:12000\n",
      "2023-12-21 21:07:00,124 - INFO - New connection: Shivansh joined from ('127.0.0.1', 61730)\n"
     ]
    }
   ],
   "source": [
    "import socket\n",
    "import threading\n",
    "import logging\n",
    "import signal\n",
    "import sys\n",
    "from concurrent.futures import ThreadPoolExecutor\n",
    "import os\n",
    "\n",
    "# Global variables\n",
    "clients = {}\n",
    "server_running = threading.Event()\n",
    "executor = ThreadPoolExecutor(max_workers=20)\n",
    "download_path = os.path.join(os.getcwd(), \"downloads\")\n",
    "\n",
    "# Setup logging\n",
    "logging.basicConfig(filename='server.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n",
    "console = logging.StreamHandler()\n",
    "console.setLevel(logging.INFO)\n",
    "formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n",
    "console.setFormatter(formatter)\n",
    "logging.getLogger('').addHandler(console)\n",
    "\n",
    "def handle_client(client_socket, addr):\n",
    "    try:\n",
    "        client_username = client_socket.recv(1024).decode('utf-8')\n",
    "        clients[client_username] = client_socket\n",
    "        send_to_all_clients(f\"{client_username} joined the chat.\\n\")\n",
    "        logging.info(f\"New connection: {client_username} joined from {addr}\")\n",
    "\n",
    "        welcome_msg = f\"Welcome, {client_username}! Type '@username message' for private message or 'broadcast message' for broadcast.\"\n",
    "        client_socket.sendall(welcome_msg.encode('utf-8'))\n",
    "\n",
    "        while True:\n",
    "            message = client_socket.recv(1024).decode('utf-8')\n",
    "            if not message:\n",
    "                break\n",
    "            process_client_message(client_username, message)\n",
    "    except Exception as e:\n",
    "        logging.error(f\"Error with client {client_username}: {e}\")\n",
    "    finally:\n",
    "        handle_disconnect(client_username)\n",
    "\n",
    "def process_client_message(client_username, message):\n",
    "    parts = message.split(' ', 1)\n",
    "    command = parts[0].lower()\n",
    "\n",
    "    if command.startswith('@') and len(parts) > 1:\n",
    "        recipient, private_message = command[1:], parts[1]\n",
    "        send_private_message(client_username, recipient, private_message)\n",
    "        logging.info(f\"Private message from {client_username} to {recipient}\")\n",
    "\n",
    "    elif command == 'broadcast' and len(parts) > 1:\n",
    "        broadcast_message = parts[1]\n",
    "        broadcast(client_username, broadcast_message)\n",
    "        logging.info(f\"Broadcast message from {client_username}\")\n",
    "\n",
    "    elif command == 'listfiles':\n",
    "        send_file_list(client_username)\n",
    "        logging.info(f\"File list requested by {client_username}\")\n",
    "\n",
    "    elif command.startswith('download') and len(parts) > 1:\n",
    "        filename = parts[1]\n",
    "        send_file(client_username, filename)\n",
    "        logging.info(f\"File {filename} requested for download by {client_username}\")\n",
    "\n",
    "    else:\n",
    "        msg = \"Invalid command. Type '@username message' for private message or 'broadcast message' for broadcast.\"\n",
    "        clients[client_username].sendall(msg.encode('utf-8'))\n",
    "\n",
    "        \n",
    "def send_to_all_clients(message):\n",
    "    for username, client_socket in clients.items():\n",
    "        try:\n",
    "            client_socket.sendall(message.encode('utf-8'))\n",
    "        except Exception as e:\n",
    "            logging.error(f\"Error sending message to {username}: {e}\")\n",
    "\n",
    "def handle_disconnect(client_username):\n",
    "    if client_username in clients:\n",
    "        logging.info(f\"{client_username} left the chat.\")\n",
    "        clients[client_username].close()\n",
    "        del clients[client_username]\n",
    "        send_to_all_clients(f\"{client_username} has left the chat.\\n\")\n",
    "\n",
    "def send_private_message(sender, recipient, message):\n",
    "    if recipient in clients:\n",
    "        private_msg = f\"{sender} (private): {message}\"\n",
    "        clients[recipient].sendall(private_msg.encode('utf-8'))\n",
    "    else:\n",
    "        sender_socket = clients[sender]\n",
    "        sender_socket.sendall(f\"User '{recipient}' not found or offline.\".encode('utf-8'))\n",
    "\n",
    "def broadcast(sender, message):\n",
    "    for username, client_socket in clients.items():\n",
    "        if username != sender:\n",
    "            try:\n",
    "                broadcast_msg = f\"{sender}: {message}\"\n",
    "                client_socket.sendall(broadcast_msg.encode('utf-8'))\n",
    "            except Exception as e:\n",
    "                logging.error(f\"Error broadcasting to {username}: {e}\")\n",
    "\n",
    "def send_file_list(client_username):\n",
    "    try:\n",
    "        file_list = os.listdir(download_path)\n",
    "        message = \"Available files:\\n\" + \"\\n\".join(file_list)\n",
    "        clients[client_username].sendall(message.encode('utf-8'))\n",
    "    except Exception as e:\n",
    "        clients[client_username].sendall(f\"Error listing files: {e}\".encode('utf-8'))\n",
    "\n",
    "def send_file(client_username, filename):\n",
    "    file_path = os.path.join(download_path, filename)\n",
    "    if not os.path.exists(file_path):\n",
    "        clients[client_username].sendall(f\"File '{filename}' not found.\".encode('utf-8'))\n",
    "        return\n",
    "\n",
    "    try:\n",
    "        with open(file_path, 'rb') as f:\n",
    "            clients[client_username].sendall(f\"Start of file {filename}\".encode('utf-8'))\n",
    "            while True:\n",
    "                bytes_read = f.read(1024)\n",
    "                if not bytes_read:\n",
    "                    break\n",
    "                clients[client_username].sendall(bytes_read)\n",
    "            clients[client_username].sendall(f\"End of file {filename}\".encode('utf-8'))\n",
    "    except Exception as e:\n",
    "        clients[client_username].sendall(f\"Error sending file {filename}: {e}\".encode('utf-8'))\n",
    "\n",
    "def start_server(host, port):\n",
    "    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n",
    "    server.bind((host, port))\n",
    "    server.listen(5)\n",
    "    logging.info(f\"Server is listening on {host}:{port}\")\n",
    "\n",
    "    server.settimeout(1)\n",
    "\n",
    "    while not server_running.is_set():\n",
    "        try:\n",
    "            client_socket, addr = server.accept()\n",
    "            executor.submit(handle_client, client_socket, addr)\n",
    "        except socket.timeout:\n",
    "            continue\n",
    "        except Exception as e:\n",
    "            logging.error(f\"Server error: {e}\")\n",
    "\n",
    "    server.close()\n",
    "\n",
    "def signal_handler(sig, frame):\n",
    "    logging.info(\"Received signal to stop the server.\")\n",
    "    server_running.set()\n",
    "\n",
    "signal.signal(signal.SIGINT, signal_handler)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    # Ensure download directory exists\n",
    "    if not os.path.exists(download_path):\n",
    "        os.makedirs(download_path)\n",
    "\n",
    "    host = '127.0.0.1'\n",
    "    port = 12000\n",
    "\n",
    "    server_thread = threading.Thread(target=start_server, args=(host, port))\n",
    "    server_thread.start()\n",
    "\n",
    "    try:\n",
    "        while not server_running.is_set():\n",
    "            pass\n",
    "    except KeyboardInterrupt:\n",
    "        server_running.set()\n",
    "        server_thread.join()\n",
    "        executor.shutdown(wait=False)\n",
    "        sys.exit(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "693e9ba9-dbc5-4737-885c-c19c0214e933",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
